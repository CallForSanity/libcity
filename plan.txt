Plan:
  - PROTOTYPE implement streetgraph.populate()
  - DONE write debug dump() outputs
  - DONE fix all memory leaks
  - DONE design Random class
  - DONE implement random generator class
  - DONE Random class unit test
  - DONE generating random numbers
  - DONE start implementing 2d drawing
  - DONE implement distance of point from line segment
  - DONE remake relationship between street graph and street generators
  - DONE remove "trimOverlapingPart" from line and place it somewhere nicer
  - DONE design and write Path class
  - DONE implement dot product of vector
  - DONE implement GetClockwiseMost
  - DONE implement GetCounterclockwiseMost
  - DONE implement removeFilament()
  - DONE implement MCB
  - DONE refactor MCB
  - DONE refactor StreetGraph generating
  - DONE implement remove intersection/road
  - DONE move road adapting and snapping algorithm to roadgenerator from streetgraph
  - DONE move area constraints to roadgenerator too
  - NOT NECCESSARYset owner of intersection/road
  - DONE implement division into zones
  - DONE implement iterating through street graph
  - PARTIALY DONE refactor streetgraph modifying algorithm
  - DONE figure how to iterate through roads in streetgraph
  - implement streetgraph.divideToZones()
  - create LSystem class for each road pattern (checkquers, organic, radial)
  - bug fixing
  - design error handling and exceptions
  - think about thesis chapters
  
  - FIX area and centroid computation in Polygon!!! will not work in 3D

  - NAPAD: GraphicInformation je jen base. V odvozenych tridach si muzeme pro kazdy symbol udelat decka. Pro ruzne typy symbolu
           a pak s nimi tak pracovat. To umozni udelat streetgraph primo v lsystemu.
  - NAPAD: Road lze zkonstruhovat jen s určenou low level reprezentací high level příjde potom
  - NAPAD: Generator nahodnych čísel jako singleton
  - NAPAD: podobnost dvou úseček zjistit vzdálenost počátku a konce jedné úsečky a druhé. Pokud jsou tyto vzdálenosti pod SNAP_DISTANCE, zdar.