Plan:
  - DONE implement LSystem::addRule()
  - DONE implement LSystem::Symbol
  - DONE reimplement LSystem using LSystem::Symbol instead of char
  - DONE clean up and comment lsystem.cpp ans lsystem.h files, divide it into sections
  - DONE implement cursor stack in GraphicLSystem
  - DONE consider implementing cursor class
  - DONE implement GraphicLSystem::Cursor class
  - DONE reimplement GraphicLSystem using Cursor class
  - DONE implement symbol interpretation and reading
  - DONE implement continuous iterating through the LSystem with continuous expanding
  - DONE implement some interface for LSystem and GraphicLSystem so they can be used without creating a child class
  - DONE implement Vector normalization and rotations
  - DONE write graphic representation of line, point and turn symbols to RoadLSystem
  - DONE clean up unit testing system a little
  - DONE migrate to UnitTest++ testing framework
  - DONE unit test for Vector class
  - DONE unit test for Point class
  - DONE unit test for LSystem
  - DONE figure out how store position of symbols (possibly new string of graphical information tight to the previous string)
  - DONE rewrite symbol list using pointers
  - DONE add additional graphical information to symbols in GraphicLSystem
  - DONE add isTerminal() method to LSystem
  - DONE virtual method for dealocating Symbols in LSystem
  - DONE don't forget destructing graphicInformation
  - DONE clean up LSystem code a little (add some functions)
  - DONE clean up GraphicLSystem code a little (add some functions)
  - DONE figure out stringPosition issues in GraphicLSystem stringPosition removed for now
  - DONE fix the fu*king segfault GraphicLSystem in readNextSymbol
  - DONE unit test for GraphicLSystem
  - DONE appending new characters to alphabet
  - DONE expand RoadLSystem implementation
  - DONE create raster road pattern class
  - DONE destruct GraphicInformation in GraphicLSystem properly
  - DONE figure out how to return graphical representation
  - DONE implement low level road construction
  - DONE create Path type in Road
  - DONE start streetgraph unit test
  - DONE create Polygon class
  - DONE write tests for Polygon class
  - DONE implement Polygon class
  - DONE design streetgraph
  - DONE implement streetgraph
  - DONE implement 2D intersection of lines
  - DONE make Line class unit test
  - DONE comment and document Line class
  - DONE comment and document Polygon class
  - DONE add constant references where possible
  - DONE implement trimming line by polygon
  - DONE segfault: poping from stack while empty in GraphicLSystem
  - DONE write test of graphicLsystem stack
  - DONE implement streetgraph.addRoad()
  - DONE implement streetgraph.addIntersection()
  - PROTOTYPE implement streetgraph.populate()
  - DONE write debug dump() outputs
  - DONE fix all memory leaks
  - DONE design Random class
  - DONE implement random generator class
  - DONE Random class unit test
  - DONE generating random numbers
  - DONE start implementing 2d drawing
  - DONE implement distance of point from line segment
  - DONE remake relationship between street graph and street generators
  - DONE remove "trimOverlapingPart" from line and place it somewhere nicer
  - DONE design and write Path class
  - DONE implement dot product of vector
  - DONE implement GetClockwiseMost
  - DONE implement GetCounterclockwiseMost
  - DONE implement removeFilament()
  - DONE implement MCB
  - DONE refactor MCB
  - DONE refactor StreetGraph generating
  - DONE implement remove intersection/road
  - DONE move road adapting and snapping algorithm to roadgenerator from streetgraph
  - DONE move area constraints to roadgenerator too
  - DONE set owner of intersection/road
  - DONE implement division into zones
  - DONE implement iterating through street graph
  - DONE refactor streetgraph modifying algorithm
  - DONE figure how to iterate through roads in streetgraph
  - DONE implement streetgraph.divideToZones()
  - DONE create LSystem class for each road pattern (checkquers, organic, radial)
  - DONE bug fixing
  - DONE remove trimOverlapingPart from line
  - DONE create github project page
  - DONE Make Intersections available outside the StreetGraph
  - DONE Write basic skeleton of precomputeIntersections
  - DONE Add Licensing information
  - DONE Create main page of the documentation
  - DONE Tests for Path::beginingDirectionVector() and Path::endDirectionVector()
  - DONE Implement resolving path direction vectors
  - DONE Tests for Vector::angleToXAxis()
  - DONE Implement Vector::angleToXAxis()
  - DONE Implement getExpansionDirection(Intersection*, Road*)
  - DONE Implement sorting vectors clockwise (using atan2?)
  - DONE Write tests for Ray class
  - DONE Implement RayToRay intersection
  - DONE Imlement Ray class
  - DONE How to work with Rays?
  - DONE Remove owners from intersection/road
  - DONE Create class RoadParameters
  - DONE configuration function in OgreCity
  - DONE setup configuration
  - DONE modify drawRoad algorithm to use new configuration
  - DONE Make drawing roads more configurable
  - DONE search in drawRoad for precomputed information and use them to draw the road
  - DONE expand precomputeIntersections
  - DONE Implement 2 way intersection
  - DONE Implement StreetGraph::toString()
  - DONE Find the bug in the MCB
  - DONE Try github's bugtracker
  - DONE Fix the issue when the angle between 2 roads in intersection is 180 degrees
  - DONE Initialize Ray by two points
  - DONE Road toString()
  - DONE Refactor coordinates transformations libcity <-> ogre
  - DONE Create libcityToOgre and ogreToLibcity methods
  - DONE Refactor Line -- rename to LineSegment
  - DONE Create Line class
  - DONE Maybe inherit LineSegment from line?
  - DONE Implement geometric algorithms for Line (should be easy)
  - DONE Write tests for Line.
  - DONE Implement Ray to Line intersection
  - DONE Implement 3-way intersections
  - DONE Clean up code in 3 so it can be reused for 4 way
  - DONE getRoadParameters(Road*)
  - DONE Impelement secondary roads
  - DONE Clean the precomputed intersecion's code a little (A LOT)
  - DONE Create 4 way intersections
  - DONE Create git repo and doxygen config to 3D app
  - DONE Create github page for OgreCity
  - DONE Design OgreCity app
  - DONE Write file header for OgreCity
  - DONE Create .gitignore in OgreCity
  - DONE Add LICENSE to OgreCity
  - DONE Create all source files for classes
  - DONE Link files inheritance
  - DONE Add top comments
  - DONE Refactor the current code accordnig to the design
  - DONE Move street graph rendering into StreetGraphRenderer
  - DONE Design RoadParameters
  - DONE Refactor RoadParameters
  - DONE Modify intersections algorithm to accept different road parameters
  - DONE Create texture for 3 and 4 way intersections
  - Think about sampling intersections too
  - Eliminate 5 and more way intersections in roadGenerators 
  - Minimal distance between two intersections
  - Think about separating intersections into a different module
  - Clean-up textures and material scripts
  - Refactor OgreCity
  - Split OgreCity into two classes
  - Clean debug messages
  - DONE Create documentation in Ogre demo app
  - 
  - design error handling and exceptions
  - BUILDINGS
  - think about thesis chapters
  
  - FIX area and centroid computation in Polygon!!! will not work in 3D
