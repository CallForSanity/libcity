Plan:
  - DONE implement LSystem::addRule()
  - DONE implement LSystem::Symbol
  - DONE reimplement LSystem using LSystem::Symbol instead of char
  - DONE clean up and comment lsystem.cpp ans lsystem.h files, divide it into sections
  - DONE implement cursor stack in GraphicLSystem
  - DONE consider implementing cursor class
  - DONE implement GraphicLSystem::Cursor class
  - DONE reimplement GraphicLSystem using Cursor class
  - DONE implement symbol interpretation and reading
  - DONE implement continuous iterating through the LSystem with continuous expanding
  - DONE implement some interface for LSystem and GraphicLSystem so they can be used without creating a child class
  - DONE implement Vector normalization and rotations
  - DONE write graphic representation of line, point and turn symbols to RoadLSystem
  - DONE clean up unit testing system a little
  - DONE migrate to UnitTest++ testing framework
  - DONE unit test for Vector class
  - DONE unit test for Point class
  - DONE unit test for LSystem
  - DONE figure out how store position of symbols (possibly new string of graphical information tight to the previous string)
  - DONE rewrite symbol list using pointers
  - DONE add additional graphical information to symbols in GraphicLSystem
  - DONE add isTerminal() method to LSystem
  - DONE virtual method for dealocating Symbols in LSystem
  - DONE don't forget destructing graphicInformation
  - DONE clean up LSystem code a little (add some functions)
  - DONE clean up GraphicLSystem code a little (add some functions)
  - DONE figure out stringPosition issues in GraphicLSystem stringPosition removed for now
  - DONE fix the fu*king segfault GraphicLSystem in readNextSymbol
  - DONE unit test for GraphicLSystem
  - DONE appending new characters to alphabet
  - DONE expand RoadLSystem implementation
  - DONE create raster road pattern class
  - DONE destruct GraphicInformation in GraphicLSystem properly
  - DONE figure out how to return graphical representation
  - DONE implement low level road construction
  - DONE create Path type in Road
  - DONE start streetgraph unit test
  - DONE create Polygon class
  - DONE write tests for Polygon class
  - DONE implement Polygon class
  - DONE design streetgraph
  - DONE implement streetgraph
  - DONE implement 2D intersection of lines
  - DONE make Line class unit test
  - DONE comment and document Line class
  - DONE comment and document Polygon class
  - add constant references where possible
  - implement streetgraph.addRoad()
  - implement streetgraph.addIntersection()
  - implement streetgraph.populate()
  - implement streetgraph.divideToZones()
  - implement 2d drawing
  - create LSystem class for each road pattern (checkquers, organic, radial)
  - generating random numbers
  - bug fixing
  - design error handling and exceptions
  - think about thesis chapters
  
  - FIX area and centroid computation in Polygon!!! will not work in 3D

  - !!! NAPAD: Cist retezec, dokud se neobjevi v zasobniku nejaka silnice pak ji vratit
  - !!! NAPAD: kazdy symbol ma pozici kurzoru od ktere se interpretuje a nebo na kterou je nastaven kurzor PO jeho interpretaci?
  - !!! ZASEK: Nutnost přidat pozici k symbolu
  - NAPAD: GraphicInformation je jen base. V odvozenych tridach si muzeme pro kazdy symbol udelat decka. Pro ruzne typy symbolu
           a pak s nimi tak pracovat. To umozni udelat streetgraph primo v lsystemu.
  - NAPAD: Road lze zkonstruhovat jen s určenou low level reprezentací high level příjde potom
  - NAPAD: Generator nahodnych čísel jako singleton