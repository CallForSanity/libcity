Plan:
  - PROTOTYPE implement streetgraph.populate()
  - DONE write debug dump() outputs
  - DONE fix all memory leaks
  - DONE design Random class
  - DONE implement random generator class
  - DONE Random class unit test
  - DONE generating random numbers
  - DONE start implementing 2d drawing
  - DONE implement distance of point from line segment
  - DONE remake relationship between street graph and street generators
  - DONE remove "trimOverlapingPart" from line and place it somewhere nicer
  - DONE design and write Path class
  - DONE implement dot product of vector
  - DONE implement GetClockwiseMost
  - DONE implement GetCounterclockwiseMost
  - DONE implement removeFilament()
  - DONE implement MCB
  - DONE refactor MCB
  - DONE refactor StreetGraph generating
  - DONE implement remove intersection/road
  - DONE move road adapting and snapping algorithm to roadgenerator from streetgraph
  - DONE move area constraints to roadgenerator too
  - DONE set owner of intersection/road
  - DONE implement division into zones
  - DONE implement iterating through street graph
  - DONE refactor streetgraph modifying algorithm
  - DONE figure how to iterate through roads in streetgraph
  - DONE implement streetgraph.divideToZones()
  - DONE create LSystem class for each road pattern (checkquers, organic, radial)
  - DONE bug fixing
  - DONE remove trimOverlapingPart from line
  - DONE create github project page
  - DONE Make Intersections available outside the StreetGraph
  - DONE Write basic skeleton of precomputeIntersections
  - DONE Add Licensing information
  - DONE Create main page of the documentation
  - DONE Tests for Path::beginingDirectionVector() and Path::endDirectionVector()
  - DONE Implement resolving path direction vectors
  - DONE Tests for Vector::angleToXAxis()
  - DONE Implement Vector::angleToXAxis()
  - DONE Implement getExpansionDirection(Intersection*, Road*)
  - DONE Implement sorting vectors clockwise (using atan2?)
  - DONE Write tests for Ray class
  - DONE Implement RayToRay intersection
  - DONE Imlement Ray class
  - DONE How to work with Rays?
  - DONE Remove owners from intersection/road
  - DONE Create class RoadParameters
  - DONE configuration function in OgreCity
  - DONE setup configuration
  - DONE modify drawRoad algorithm to use new configuration
  - DONE Make drawing roads more configurable
  - DONE search in drawRoad for precomputed information and use them to draw the road
  - DONE expand precomputeIntersections
  - DONE Implement 2 way intersection
  - DONE Implement StreetGraph::toString()
  - DONE Find the bug in the MCB
  - DONE Try github's bugtracker
  - DONE Fix the issue when the angle between 2 roads in intersection is 180 degrees
  - DONE Initialize Ray by two points
  - DONE Road toString()
  - DONE Refactor coordinates transformations libcity <-> ogre
  - DONE Create libcityToOgre and ogreToLibcity methods
  - Refactor Line -- rename to LineSegment
  - Create Line class
  - Maybe inherit LineSegment from line?
  - Implement 3-way intersections
  - Clean the precomputed intersecion's code a little (A LOT)
  - Create 4 way intersections
  - Create texture for 3 and 4 way intersections
  - Think about sampling intersections too
  - Eliminate 5 and more way intersections in roadGenerators
  - Clean-up textures and material scripts
  - Refactor OgreCity
  - Split OgreCity into two classes
  - Clean debug messages
  - Create documentation in Ogre demo app
  - 
  - design error handling and exceptions
  - BUILDINGS
  - think about thesis chapters
  
  - FIX area and centroid computation in Polygon!!! will not work in 3D
